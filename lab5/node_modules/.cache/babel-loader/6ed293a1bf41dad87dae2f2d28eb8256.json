{"ast":null,"code":"var _jsxFileName = \"/home/bartosz/PIW_Lab/lab4/lab4/src/App.js\",\n    _s = $RefreshSig$();\n\nimport AddStudent from './components/AddStudent';\nimport SearchFilter from './components/SearchFilter';\nimport { StudentList } from './components/StudentList';\nimport { useState } from 'react';\nimport { NumberOfFoundUsers } from './components/NumberOfFoundUsers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [students, setStudents] = useState([]);\n  const [filteredStudents, setFilteredStudents] = useState([]);\n\n  const addStudent = (name, description, email, tags) => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newStudent = {\n      id,\n      name,\n      description,\n      email,\n      tags\n    };\n    setStudents([...students, newStudent]);\n    setFilteredStudents([...filteredStudents, newStudent]);\n  };\n\n  const filterStudentsByTag = enteredText => {\n    if (enteredText.length > 0) {\n      const result = students.filter(student => {\n        for (var ent in enteredText) {\n          for (var tag in student.tags) {\n            if (student.tags[tag] !== enteredText[ent]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      });\n      setFilteredStudents(result);\n    } else {\n      setFilteredStudents(students);\n    }\n  };\n\n  const filterStudentsByDescription = enteredText => {\n    if (enteredText) {\n      const result = students.filter(item => item.description.toLowerCase().includes(enteredText.toLowerCase())).map(({\n        id,\n        name,\n        description,\n        email,\n        tags\n      }) => ({\n        id,\n        name,\n        description,\n        email,\n        tags\n      }));\n      setFilteredStudents(result);\n    } else {\n      setFilteredStudents(students);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SearchFilter, {\n      updateByDescription: filterStudentsByDescription,\n      updateByTags: filterStudentsByTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddStudent, {\n      onAdd: addStudent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StudentList, {\n      students: filteredStudents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NumberOfFoundUsers, {\n      foundUsers: filteredStudents.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"V2xTSyDp2Qyg3SPUAvsF+T4fjaM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/bartosz/PIW_Lab/lab4/lab4/src/App.js"],"names":["AddStudent","SearchFilter","StudentList","useState","NumberOfFoundUsers","App","students","setStudents","filteredStudents","setFilteredStudents","addStudent","name","description","email","tags","id","Math","floor","random","newStudent","filterStudentsByTag","enteredText","length","result","filter","student","ent","tag","filterStudentsByDescription","item","toLowerCase","includes","map"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,kBAAT,QAAmC,iCAAnC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACK,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAC,EAAD,CAAxD;;AAEA,QAAMO,UAAU,GAAG,CAACC,IAAD,EAAOC,WAAP,EAAoBC,KAApB,EAA2BC,IAA3B,KAAoC;AACrD,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA/C;AAEA,UAAMC,UAAU,GAAG;AAAEJ,MAAAA,EAAF;AAAMJ,MAAAA,IAAN;AAAYC,MAAAA,WAAZ;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA;AAAhC,KAAnB;AAEAP,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAca,UAAd,CAAD,CAAX;AACAV,IAAAA,mBAAmB,CAAC,CAAC,GAAGD,gBAAJ,EAAsBW,UAAtB,CAAD,CAAnB;AACD,GAPD;;AASA,QAAMC,mBAAmB,GAAIC,WAAD,IAAiB;AAC3C,QAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,YAAMC,MAAM,GAAGjB,QAAQ,CAACkB,MAAT,CAAiBC,OAAD,IAAa;AAC1C,aAAI,IAAIC,GAAR,IAAeL,WAAf,EAA2B;AACzB,eAAI,IAAIM,GAAR,IAAeF,OAAO,CAACX,IAAvB,EAA4B;AAG1B,gBAAGW,OAAO,CAACX,IAAR,CAAaa,GAAb,MAAsBN,WAAW,CAACK,GAAD,CAApC,EAA0C;AACxC,qBAAO,KAAP;AACD;AACF;;AACD,iBAAO,IAAP;AACD;AACF,OAXc,CAAf;AAaAjB,MAAAA,mBAAmB,CAACc,MAAD,CAAnB;AACD,KAfD,MAeO;AACLd,MAAAA,mBAAmB,CAACH,QAAD,CAAnB;AACD;AACF,GAnBD;;AAqBA,QAAMsB,2BAA2B,GAAIP,WAAD,IAAiB;AACnD,QAAIA,WAAJ,EAAiB;AACf,YAAME,MAAM,GAAGjB,QAAQ,CAACkB,MAAT,CAAiBK,IAAD,IAAUA,IAAI,CAACjB,WAAL,CAAiBkB,WAAjB,GAA+BC,QAA/B,CAAwCV,WAAW,CAACS,WAAZ,EAAxC,CAA1B,EAA8FE,GAA9F,CAAkG,CAAC;AAAEjB,QAAAA,EAAF;AAAMJ,QAAAA,IAAN;AAAYC,QAAAA,WAAZ;AAAyBC,QAAAA,KAAzB;AAAgCC,QAAAA;AAAhC,OAAD,MAA6C;AAAEC,QAAAA,EAAF;AAAMJ,QAAAA,IAAN;AAAYC,QAAAA,WAAZ;AAAyBC,QAAAA,KAAzB;AAAgCC,QAAAA;AAAhC,OAA7C,CAAlG,CAAf;AACAL,MAAAA,mBAAmB,CAACc,MAAD,CAAnB;AACD,KAHD,MAGO;AACLd,MAAAA,mBAAmB,CAACH,QAAD,CAAnB;AACD;AACF,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,mBAAmB,EAAEsB,2BAAnC;AAAgE,MAAA,YAAY,EAAER;AAA9E;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,kBAAD;AAAoB,MAAA,UAAU,EAAEA,gBAAgB,CAACc;AAAjD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAnDQjB,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import AddStudent from './components/AddStudent'\nimport SearchFilter from './components/SearchFilter'\nimport { StudentList } from './components/StudentList'\nimport { useState } from 'react'\nimport { NumberOfFoundUsers } from './components/NumberOfFoundUsers'\n\nfunction App() {\n  const [students, setStudents] = useState([])\n  const [filteredStudents, setFilteredStudents] = useState([])\n\n  const addStudent = (name, description, email, tags) => {\n    const id = Math.floor(Math.random() * 10000) + 1\n\n    const newStudent = { id, name, description, email, tags }\n\n    setStudents([...students, newStudent])\n    setFilteredStudents([...filteredStudents, newStudent])\n  }\n\n  const filterStudentsByTag = (enteredText) => {\n    if (enteredText.length > 0) {      \n      const result = students.filter((student) => {\n        for(var ent in enteredText){          \n          for(var tag in student.tags){       \n            \n            \n            if(student.tags[tag] !== enteredText[ent]){\n              return false;\n            }\n          }\n          return true;\n        }\n      })\n      \n      setFilteredStudents(result)\n    } else {\n      setFilteredStudents(students)\n    }\n  }\n\n  const filterStudentsByDescription = (enteredText) => {\n    if (enteredText) {\n      const result = students.filter((item) => item.description.toLowerCase().includes(enteredText.toLowerCase())).map(({ id, name, description, email, tags }) => ({ id, name, description, email, tags }));\n      setFilteredStudents(result)\n    } else {\n      setFilteredStudents(students)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchFilter updateByDescription={filterStudentsByDescription} updateByTags={filterStudentsByTag} />\n      <AddStudent onAdd={addStudent} />\n      <StudentList students={filteredStudents} />\n      <NumberOfFoundUsers foundUsers={filteredStudents.length} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}